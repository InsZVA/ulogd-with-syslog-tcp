我增加了ULOGD直接使用TCP发送日志到SYSLOGNG的逻辑，这部分的模块名称为SYSLOGTCP，使用方法与以前SYSLOG基本一致，
在这个项目的根目录下还有一个ulogd_example.conf是新功能的示例，注意其中使用了这样的栈：

```
stack=log3:NFLOG,base1:BASE,ifi1:IFINDEX,ip2str1:IP2STR,print1:PRINTPKT,sys1:SYSLOG
```

以及SYSLOGTCP模块的配置说明如下：

```
[sys1]
facility=LOG_LOCAL3
host="100.127.112.2"
port="514"
buffer=4096000
flush=3560000
```

facility是消息的facility标识，host是目标服务器的地址，port是目标服务器的端口号，这三个参数是必须的。
buffer是TCP发送前的缓冲大小，flush是触发TCP发送的大小。

我重写了部分字符串处理的逻辑，不再使用标准库提供的Sprintf，提高了一些计算性能。

安装这个库要使用编译安装的方法，方法在根目录下的INSTALL.MD中有说明。

在这个过程中遇到了一些问题，现总结如下（基于上线机器所采用的2.6内核）：

1. 操作系统的mpstat top 以及 sar工具对CPU的检测非常不准确，在ULOGD处理少量数据的时候，可以观测到很明显的soft%，
软中断CPU消耗，但是当ULOGD处理的数据量达到一定规模，soft%就会突然消失，甚至还会出现软中断等于0，user%也没满。

2. ULOGD从netlink中获取数据，使用了recv(fd, buff, size, opt)这样的操作(具体见input/packet/ulogd_inppkt_NFLOG.c#443行)，
我传给了他一个很大的buffer，目的是让他一次从netlink中多取一些buffer出来，结果发现即使netlink自己的缓冲区满了，也不会填充
满我传给他的buffer。

对这两个问题，我提出了原因猜想：

1. 网卡使用了NAPI，在高负载下，可以实现用轮询代替中断。

2. linux2.6内核netlink读包时候，每次只分配了1个页，导致每次只能读很少，该部分代码在新内核已经被改掉。

更新：原来是我理解错了，DGRAM型的socket，每次recv调用都是只返回一个包。

对于第一个问题，其实是因为linux内核在计算CPU消耗时，是这么处理软中断的，如果软中断中断了进程上下文，它会记账给进程，如果是发生在内核线程，才会记账在%soft。


=====================================================================================================


Userspace logging daemon for netfilter/iptables

Project Homepage: http://www.gnumonks.org/projects/ulogd
Mailinglist: http://lists.gnumonks.org/mailman/listinfo/ulogd/

This is just a short README, pleaes see the more extensive documentation
in the doc/ subdirectory.

===> IDEA

This packages is intended for doing all netfilter related logging inside a
userspace process.  This includes
	- logging of ruleset violations via ipt_ULOG (kernel 2.4.18+)
	- logging of ruleset violations via nfnetlink_log (kernel 2.6.14+)
	- logging of connection startup/teardown (kernel 2.6.14+)
	- connection-based accounting  (kernel 2.6.14+)

===> CONTENTS

= ulogd daemon (ulogd)
A sophisticated logging daemon core which uses a plugin for about anything. The
daemon provides a plugin API for
	- input plugins
	- filter plugins
	- output plugins

= documentation (doc)
A quite verbose documentation of this package and it's configuration exists,
please actually make use of it and read it :)

===> USAGE

To be able to build ulogd, you need to have working developement files and
and libraries for:
 - libnfnetlink
 - libmnl
 - libnetfilter_log 		[optional]
 - libnetfilter_conntrack	[optional]
 - libnetfilter_acct		[optional]

Output plugins are build if the needed library and headers are found. This
includes:
 - PCAP: libpcap
 - PGSQL: libpq
 - MySQL: libmysqlclient
 - SQLITE3: libsqlite3
 - DBI: libdbi

The build procedure is standard:
 $ ./configure
 $ make
 $ sudo make install

After build, you need to edit the ulogd.conf file to define a stack or more
to use.

===> EXAMPLES

= NFLOG usage

At first a simple example, which passes every outgoing packet to the
userspace logging, using nfnetlink group 3.

iptables -A OUTPUT -j NFLOG --nflog-group 3

A more advanced one, passing all incoming tcp packets with destination
port 80 to the userspace logging daemon listening on netlink multicast
group 32. All packets get tagged with the ulog prefix "inp"

iptables -A INPUT -j NFLOG -p tcp --dport 80 --nflog-group 32 --nflog-prefix inp

See iptables -j NFLOG -h for complete information about NFLOG.

= NFCT usage

To use connection logging, simply activate in ulogd.conf one stack using
the NFCT plugin.

For example, the following stack will do flow-based logging via
LOGEMU:

 stack=ct1:NFCT,ip2str1:IP2STR,print1:PRINTFLOW,emu1:LOGEMU

= NFACCT usage

On ulogd side, activate a stack using the NFACCT module.

You then need to create counters:
 # nfacct add ipv4.tcp
 # nfacct add ipv6.tcp.443

Once this is done, you can then create iptables matching rule that will increment
each time a packet hit them:

 # iptables -A FORWARD -p tcp -m nfacct --nfacct-name ipv4.tcp
 # ip6tables -A FORWARD -p tcp  --dport 443 -m nfacct --nfacct-name ipv6.tcp.443
 # ip6tables -A FORWARD -p tcp  --sport 443 -m nfacct --nfacct-name ipv6.tcp.443

NFACCT plugin will then dump periodically the counters and trigger an update of the
output corresponding to the active stacks.

===> COPYRIGHT + CREDITS

The code and documentation is
	(C) 2000-2006 by Harald Welte <laforge@gnumonks.org>
	(C) 2008-2012 Pablo Neira Ayuso <pablo@netfilter.org>
	(C) 2008-2013 Eric Leblond <eric@regit.org>

Thanks also to the valuable contributions of Daniel Stone, Alexander Janssen,
Michael Stolovitzsky and Jozsef Kadlecsik.

Credits to Rusty Russell, James Morris, Marc Boucher and all the other
netfilter hackers.
